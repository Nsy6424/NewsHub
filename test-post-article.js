// Script test POST article API
const BASE_URL = 'http://localhost:3000/api';

async function testPostArticle() {
  console.log('üìù Testing POST Article API\n');

  let authToken = null;

  try {
    // Step 1: Login as Author to get token
    console.log('üîë Step 1: Login as Author...');
    const loginResponse = await fetch(`${BASE_URL}/auth/login`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        email: 'tacgia@test.com', // Email t·ª´ seed data
        password: 'password123'
      })
    });

    const loginResult = await loginResponse.json();

    if (loginResponse.ok) {
      console.log('‚úÖ Login successful');
      authToken = loginResult.token;
      console.log(`üé´ Token: ${authToken.substring(0, 50)}...`);
    } else {
      console.log('‚ùå Login failed:', loginResult);
      console.log('üí° Try registering an author first or check credentials');
      return;
    }

    console.log('\n' + '='.repeat(60) + '\n');

    // Step 2: Get categories to use valid category_id
    console.log('üìÇ Step 2: Get categories...');
    const categoriesResponse = await fetch(`${BASE_URL}/categories`);
    const categories = await categoriesResponse.json();

    let categoryId = 1; // default
    if (categoriesResponse.ok && categories.length > 0) {
      categoryId = categories[0].id;
      console.log(`‚úÖ Using category: ${categories[0].name} (ID: ${categoryId})`);
    } else {
      console.log('‚ö†Ô∏è  No categories found, using default ID: 1');
    }

    console.log('\n' + '='.repeat(60) + '\n');

    // Step 3: Test POST with valid data
    console.log('üìù Step 3: Create new article...');
    const articleData = {
      title: 'Xu h∆∞·ªõng ph√°t tri·ªÉn Web 3.0 v√† Metaverse',
      summary: 'Kh√°m ph√° nh·ªØng c√¥ng ngh·ªá ti√™n ti·∫øn ƒëang ƒë·ªãnh h√¨nh t∆∞∆°ng lai c·ªßa internet v√† th·∫ø gi·ªõi ·∫£o',
      content: `
        <p>Web 3.0 v√† Metaverse ƒëang tr·ªü th√†nh nh·ªØng t·ª´ kh√≥a hot nh·∫•t trong ng√†nh c√¥ng ngh·ªá hi·ªán nay. ƒê√¢y kh√¥ng ch·ªâ l√† xu h∆∞·ªõng m√† l√† cu·ªôc c√°ch m·∫°ng th·ª±c s·ª± ƒëang di·ªÖn ra.</p>
        
        <h2>Web 3.0 - Internet th·∫ø h·ªá m·ªõi</h2>
        <p>Web 3.0 ƒë∆∞·ª£c x√¢y d·ª±ng tr√™n n·ªÅn t·∫£ng blockchain, mang l·∫°i:</p>
        <ul>
          <li><strong>Ph√¢n quy·ªÅn:</strong> Kh√¥ng c√≤n ph·ª• thu·ªôc v√†o c√°c t·∫≠p ƒëo√†n c√¥ng ngh·ªá l·ªõn</li>
          <li><strong>S·ªü h·ªØu d·ªØ li·ªáu:</strong> Ng∆∞·ªùi d√πng ki·ªÉm so√°t ho√†n to√†n d·ªØ li·ªáu c·ªßa m√¨nh</li>
          <li><strong>T√≠nh minh b·∫°ch:</strong> M·ªçi giao d·ªãch ƒë·ªÅu ƒë∆∞·ª£c ghi nh·∫≠n tr√™n blockchain</li>
          <li><strong>Kh·∫£ nƒÉng t∆∞∆°ng t√°c:</strong> C√°c ·ª©ng d·ª•ng c√≥ th·ªÉ k·∫øt n·ªëi v·ªõi nhau d·ªÖ d√†ng</li>
        </ul>

        <h2>Metaverse - Th·∫ø gi·ªõi ·∫£o song song</h2>
        <p>Metaverse kh√¥ng ch·ªâ l√† game m√† l√† m·ªôt h·ªá sinh th√°i s·ªë ho√†n ch·ªânh:</p>
        <ol>
          <li><em>Kinh t·∫ø ·∫£o:</em> Mua b√°n, kinh doanh trong th·∫ø gi·ªõi s·ªë</li>
          <li><em>X√£ h·ªôi ·∫£o:</em> T∆∞∆°ng t√°c, l√†m vi·ªác, gi·∫£i tr√≠ tr·ª±c tuy·∫øn</li>
          <li><em>Gi√°o d·ª•c ·∫£o:</em> H·ªçc t·∫≠p immersive v·ªõi VR/AR</li>
          <li><em>Y t·∫ø ·∫£o:</em> ChƒÉm s√≥c s·ª©c kh·ªèe t·ª´ xa</li>
        </ol>

        <h2>Th√°ch th·ª©c v√† c∆° h·ªôi</h2>
        <p><strong>Th√°ch th·ª©c:</strong></p>
        <p>- V·∫•n ƒë·ªÅ b·∫£o m·∫≠t v√† quy·ªÅn ri√™ng t∆∞<br>
        - Chi ph√≠ ph√°t tri·ªÉn v√† duy tr√¨ cao<br>
        - Thi·∫øu chu·∫©n chung gi·ªØa c√°c n·ªÅn t·∫£ng<br>
        - Kho·∫£ng c√°ch s·ªë gi·ªØa c√°c v√πng mi·ªÅn</p>

        <p><strong>C∆° h·ªôi:</strong></p>
        <p>- Th·ªã tr∆∞·ªùng ti·ªÅm nƒÉng h√†ng ngh√¨n t·ª∑ USD<br>
        - T·∫°o ra nhi·ªÅu vi·ªác l√†m m·ªõi<br>
        - C·∫£i thi·ªán tr·∫£i nghi·ªám ng∆∞·ªùi d√πng<br>
        - K·∫øt n·ªëi to√†n c·∫ßu kh√¥ng gi·ªõi h·∫°n</p>

        <h2>K·∫øt lu·∫≠n</h2>
        <p>Web 3.0 v√† Metaverse ƒë·∫°i di·ªán cho t∆∞∆°ng lai c·ªßa internet. C√°c doanh nghi·ªáp v√† c√° nh√¢n c·∫ßn chu·∫©n b·ªã cho cu·ªôc chuy·ªÉn ƒë·ªïi n√†y ƒë·ªÉ kh√¥ng b·ªã t·ª•t l·∫°i ph√≠a sau. <strong>ƒê√¢y l√† c∆° h·ªôi v√†ng cho nh·ªØng ai d√°m ti√™n phong!</strong></p>
      `,
      image_url: 'https://images.unsplash.com/photo-1633356122544-f134324a6cee?w=800&h=400&fit=crop',
      category_id: categoryId,
      priority: 8
    };

    const createResponse = await fetch(`${BASE_URL}/articles`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${authToken}`
      },
      body: JSON.stringify(articleData)
    });

    const createResult = await createResponse.json();

    if (createResponse.ok) {
      console.log('‚úÖ Article created successfully!');
      console.log('üìÑ Created article:');
      console.log(`   ID: ${createResult.article.id}`);
      console.log(`   Title: "${createResult.article.title}"`);
      console.log(`   Slug: ${createResult.article.slug}`);
      console.log(`   Category: ${createResult.article.category}`);
      console.log(`   Author: ${createResult.article.author}`);
      console.log(`   Priority: ${createResult.article.priority}`);
    } else {
      console.log('‚ùå Article creation failed:', createResult);
    }

    console.log('\n' + '='.repeat(60) + '\n');

    // Step 4: Test error cases
    console.log('üö´ Step 4: Test error cases...');

    // Test missing required fields
    const invalidResponse = await fetch(`${BASE_URL}/articles`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${authToken}`
      },
      body: JSON.stringify({
        title: '',
        content: '',
        // missing category_id
      })
    });

    const invalidResult = await invalidResponse.json();
    if (invalidResponse.status === 400) {
      console.log('‚úÖ Validation working correctly');
      console.log(`üö´ ${invalidResult.error}`);
    }

    // Test invalid JSON
    const badJsonResponse = await fetch(`${BASE_URL}/articles`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': `Bearer ${authToken}`
      },
      body: 'invalid json{'
    });

    const badJsonResult = await badJsonResponse.json();
    if (badJsonResponse.status === 400) {
      console.log('‚úÖ JSON validation working correctly');
      console.log(`üö´ ${badJsonResult.error}`);
    }

    console.log('\nüéâ POST Article API test completed!');

  } catch (error) {
    console.error('‚ùå Network error:', error.message);
    console.log('\nüí° Make sure your Next.js dev server is running: npm run dev');
    console.log('üí° Also ensure you have an author account in the database');
  }
}

// Run the test
testPostArticle();
